; max7219 8x8 pixel matrix driver
.program max7219

.side_set 2 opt ; CLK, CS

.wrap_target
    mov x, y            side 0b01 [0]   ; copy y to x (number of chained displays, y is preset from CPU during init)
                                        ; initialize clock low, CS high
loop:
    pull ifempty block            [0]   ; pull OSR from output FIFO
                                        ; it's important to omit side-set here so that CS stays low if we're between displays
                                        ;   but stays high if we're between entire messages
    out pins, 1         side 0b00 [1]   ; output 1 bit half a cycle before we raise the clock
                                        ; clock low, CS low
    jmp !OSRE loop      side 0b10 [0]   ; raise clock to tell max7219 to latch the bit, repeat until OSR is empty
                                        ; clock high, CS low
    jmp X-- loop        side 0b00 [0]   ; once we reach the end of OSR, pull and repeat until X is 0 (no more displays)
.wrap

;.wrap_target
;    out pins, 1   side 0 ; stall here if no data (clock low)
;    nop           side 1
;.wrap

% c-sdk {

static inline void max7219_program_init(PIO pio, uint sm, uint offset, uint module_count, uint data_pin, uint clk_pin, uint cs_pin, float clk_div) {
    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, clk_pin);
    pio_gpio_init(pio, cs_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, cs_pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, true);
    pio_sm_config c = max7219_program_get_default_config(offset);
    //sm_config_set_sideset(&c, 3, true, false);
    sm_config_set_sideset_pins(&c, cs_pin);
    sm_config_set_out_pins(&c, data_pin, 1);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_out_shift(&c, false, false, 16);
    pio_sm_init(pio, sm, offset, &c);
    // this probably should throw an error instead of bitmasking?
    // set the number of displays we're driving (this should be a param)
    pio_sm_exec_wait_blocking(pio, sm, pio_encode_set(pio_y, (module_count - 1) & 0b11111));
    pio_sm_set_enabled(pio, sm, true);

}

// Making use of the narrow store replication behaviour on RP2040 to get the
// data left-justified (as we are using shift-to-left to get MSB-first serial)

static inline void max7219_put(PIO pio, uint sm, uint16_t x) {
    while (pio_sm_is_tx_fifo_full(pio, sm))
        ;
    *(volatile uint16_t*)&pio->txf[sm] = x;
}

// SM is done when it stalls on an empty FIFO

static inline void max7219_wait_idle(PIO pio, uint sm) {
    uint32_t sm_stall_mask = 1u << (sm + PIO_FDEBUG_TXSTALL_LSB);
    pio->fdebug = sm_stall_mask;
    while (!(pio->fdebug & sm_stall_mask))
        ;
}
%}
